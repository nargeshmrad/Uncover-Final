const hotspot = document.getElementById('hotspot');
const textbox = document.getElementById('textbox');
const mirrorDirtAudio = document.getElementById('mirrorDirtAudio');
const dreamVoiceAudio = document.getElementById('dreamVoiceAudio');
const sponge = document.getElementById('sponge');
const canvas = document.getElementById('dirtCanvas');
const ctx = canvas.getContext('2d', { willReadFrequently: true });

// Set canvas size to match CSS dimensions
canvas.width = 142;
canvas.height = 410;

// Load and draw dirt image
const dirtImage = new Image();
dirtImage.src = '../assets/HimInMirrorAlbum/DirtOnMirror.png';
dirtImage.onload = () => {
    ctx.drawImage(dirtImage, 0, 0, canvas.width, canvas.height);
};

let voiceTimer = null;
let resetTimer = null;
let activated = false;

// Main Interaction Triggered Once on First Hover
hotspot.addEventListener('mouseenter', () => {
  if (activated) return;
  activated = true;

  mirrorDirtAudio.currentTime = 0;
  mirrorDirtAudio.play();

  voiceTimer = setTimeout(() => {
    dreamVoiceAudio.currentTime = 0;
    dreamVoiceAudio.play();
    textbox.style.opacity = 1;

    resetTimer = setTimeout(() => {
      textbox.style.opacity = 0;
      sponge.style.display = 'block'; // Show sponge after dreamVoice finishes
    }, dreamVoiceAudio.duration * 1000);

  }, 2000);
});

// Sponge Dragging Logic
let isDraggingSponge = false;
let spongeOffsetX = 0;
let spongeOffsetY = 0;

sponge.addEventListener('mousedown', (e) => {
  isDraggingSponge = true;
  spongeOffsetX = e.offsetX;
  spongeOffsetY = e.offsetY;
  sponge.style.cursor = 'grabbing';
});

// Function to check if the canvas is completely transparent
function isCanvasEmpty() {
    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    const pixels = imageData.data;
    
    // Check alpha channel (every 4th value)
    for (let i = 3; i < pixels.length; i += 4) {
        if (pixels[i] > 0) { // If any pixel has opacity
            return false;
        }
    }
    return true;
}

document.addEventListener('mousemove', (e) => {
  if (isDraggingSponge) {
    const rect = sponge.parentElement.getBoundingClientRect();
    const newX = e.clientX - rect.left - spongeOffsetX;
    const newY = e.clientY - rect.top - spongeOffsetY;
    sponge.style.left = `${newX}px`;
    sponge.style.top = `${newY}px`;

    // Calculate position relative to canvas
    const canvasRect = canvas.getBoundingClientRect();
    const eraseX = e.clientX - canvasRect.left;
    const eraseY = e.clientY - canvasRect.top;

    // Only erase if we're over the canvas
    if (eraseX >= 0 && eraseX <= canvasRect.width &&
        eraseY >= 0 && eraseY <= canvasRect.height) {
      // Convert screen coordinates to canvas coordinates
      const canvasX = (eraseX / canvasRect.width) * canvas.width;
      const canvasY = (eraseY / canvasRect.height) * canvas.height;
      
      // Erase a circular area
      ctx.globalCompositeOperation = 'destination-out';
      ctx.beginPath();
      ctx.arc(canvasX, canvasY, 20, 0, Math.PI * 2);
      ctx.fill();

      // Check if canvas is empty after erasing
      if (isCanvasEmpty()) {
        hotspot.classList.add('dirt-erased');
        sponge.style.display = 'none'; // Hide sponge when done
      }
    }
  }
});

window.addEventListener('mouseup', () => {
  if (isDraggingSponge) {
    isDraggingSponge = false;
    sponge.style.cursor = 'grab';
  }
});



Html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Him In Mirror Interaction</title>
  <style>
    html, body {
      margin: 0;
      height: 100%;
      background: #000;
    }

    .container {
      position: relative;
      width: 100%;
      height: 100vh;
      overflow: hidden;
    }

    .container img.background {
      width: 100%;
      height: 100%;
      object-fit: contain;
      display: block;
    }

    #dirtCanvas {
      position: absolute;
      top: 13%;     /* Adjust position */
      left: 39.5%;    /* Adjust position */
      width: 142px; /* Adjust size */
      height: 410px;
      z-index: 2;   /* Behind hotspot but above background */
    }

    .hotspot {
      position: absolute;
      top: 45%;  /* Change this to move */
      left: 50%; /* Change this to move */
      width: 500px; /* Change this to resize */
      height: 700px; /* Change this to resize */
      border: 2px dashed red;
      transform: translate(-50%, -50%);
      z-index: 2;
    }

    .hotspot.dirt-erased:hover {
      cursor: url('../assets/HimInMirrorAlbum/eyeCursor.png') 35 35, auto;
    }

    .textbox {
      position: absolute;
      top: 80%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 30%;
      opacity: 0;
      transition: opacity 0.5s ease;
      z-index: 3;
    }

    .sponge {
  position: absolute;
  top: 5%;    /* Change position */
  left: 55%;   /* Change position */
  width: 70px;/* Change size */
  height: auto;
  z-index: 4;
  display: none; /* Hidden by default */
  cursor: grab;
}
  </style>
</head>
<body>

  <div class="container">
    <img class="background" src="../assets/HimInMirrorAlbum/HimInMirrorAlbum.png" alt="Background">
    <canvas id="dirtCanvas"></canvas>
    
    <img class="sponge" id="sponge" src="assets/HimInMirrorAlbum/sponge.png" alt="Sponge">

    <div class="hotspot" id="hotspot"></div>
    <img class="textbox" id="textbox" src="../assets/HimInMirrorAlbum/TexBoxMirror.png" alt="Textbox">
    
  </div>

  <audio id="mirrorDirtAudio" src="../assets/HimInMirrorAlbum/mirrorDirt.mp3" loop></audio>
  <audio id="dreamVoiceAudio" src="../assets/HimInMirrorAlbum/DreamVoice.mp3"></audio>

  <script src="himInMirrorAlbum.js"></script>
</body>
</html>